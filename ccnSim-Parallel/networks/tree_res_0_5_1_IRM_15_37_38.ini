#General parameters
[General]
network = networks.${net = networks/tree_res_0_5_1 }_network

simtime-scale=-9

repeat = 10
seed-set = ${repetition}

#####################################################################
########################  Repositories ##############################
#####################################################################
## (In the case of standard topologies, like tree or cascades, 
## repositories are placed within the corresponding ned file.
## Indicates which node is a repository (leave blank for random positioning)
#**.node_repos = ""
## Indicates how many repositories there are inside the network
#**.num_repos  = ${numRepos = 1 }
## Indicates in how many (random) repositories the seed copy of a given content is replicated.
#**.replicas = 1

#####################################################################
##########################  Clients  ################################
#####################################################################
## (In the case of standard topologies, like tree or cascades, 
## clients are placed within the corresponding ned file.
## Indicates which node is a client (leave blank for random positioning)
#**.node_clients = ""
## Indicates how many clients there are inside the network
#**.num_clients = ${numClients = 30 }
## Arrival request rate at each client
**.lambda = ${lam = 20 }
## The RTT is used to trigger retransmissions (usually, RTT >> N_D*d, where N_D is the network diameter, and d is the average delay on a link)
**.RTT = 2
## Timer indicating how often the state of a content download is checked. 
**.check_time = 5
## Indicates the type of the simulated clients: IRM, Shot Noise. 
**.client_type = "client_${clientType = IRM }"

#####################################################################
###################  Content Distribution ###########################
#####################################################################
## Average size of a content (# chunks). Content size is exponentially distributed.
**.file_size =  1
## Shaping factor of the Zipf's distribution
**.alpha = ${alp = 1 }
## Plateau of the MZipf distribution
**.q = 0
## Cardinality of the catalog.
**.objects = ${totCont = 1e5 }
## Percentile after which the catalog is aggregated (e.g., 90-th percentile = 0.9)
**.perc_aggr = ${catAggr = 1 }
## Percentile after which 'per file' statistics are not gathered. 
**.stat_aggr = 0.5
## IMPORTANT - Content distribution type: ShotNoiseContentDistribution. Otherwise comment this line if you want to simulate an IRM request generation process.
#**.content_distribution_type = "${contDistrType = ShotNoiseContentDistribution }"

#####################################################################
##########################  Forwarding ##############################
#####################################################################
## Strategy layer (interest forwarding): 
## - spr: Shortest Path Strategy. Interest packets are sent toward the closest repository (in terms of #hops count)
## - nrr1: Nearest Replica Routing (one phase)
## - nrr:  Nearest Replica Routing (two phases)
## - random_repository: Interest packets are sent toward one random repository (among those who store the requested content)
## - parallel_repository: Interest packets are sent toward all the repositories which store the requested content.
**.FS = "${ fs = nrr }"
**.TTL2 = ${ttl = 1000}
**.TTL1= ${ttl}
**.routing_file = ""

#####################################################################
##########################  Caching  ################################
#####################################################################
## Mets-Caching algorithms: fixP, lce , no_cache , lcd, btw, prob_cache, two_lru
**.DS = "${ mc = lce }"
## Replacement strategies: {lru,lfu,fifo,two,random}_cache
**.RS = "${ rs = lru }_cache"
## Cache size (#chunks)
**.C = ${cDim = 100 }
## Name cache size (#content IDs). Used only with two_lru meta-caching.
**.NC = ${ncDim = 0 }

#####################################################################
########################  Statistics ################################
#####################################################################
## Time window for the stability checking
**.window = 600
## Sampling time 
**.ts = 1
##Ex: in this case every 60 secs a stabilization checks is executed. Every 0.1 sec a sample is collected. 
##    Thus, the stabilization is checked every 60/0.1=600 samples.
## Number of nodes whose state is checked (i.e., if they are full) in order to start collecting statistics. 
##	'-1' indicates *all* nodes.
**.partial_n = ${checkedNodes = 0 }

## A cache is considered stable if the last N samples show variance smaller than this threshold
**.variance_threshold = ${variance = 0.0001 }

##Time of simulation after the stabilization
**.steady = ${steady = 625 }

##Start Mode (i.e., 'hot' or 'cold' start, meaning full/empty caches)
**.start_mode = "${startMode = hot }"

##Fill Mode, i.e., 'naive' or 'model' filling.
## naive = caches are filled with the most popular contents;
## model = caches are filled according to the result of the analytical model [] (add ref)
**.fill_mode = "${fill = model }"

**.interest_aggregation = ${intAggr = false }

#####################################################################
###############  Strategy Layer (link failure) ######################
#####################################################################
## Scheduled time for the failure
**.fail_time = ${failTime = 50000 }
**.fail_duration = ${failDuration = 200 }
**.fail_transient = ${failTransient = 5000 }
**.fail_scenario = ${failScenario = false }

#####################################################################
###############  Core Layer (Link Load Evaluation) ##################
#####################################################################
**.llEval = ${boolEval = false }
**.maxInterval = ${evalInterval = 10.0 }
# Datarate [1Mbps] (so far fixed and equal for all links) 
**.datarate = ${linkrate = 1000000 }


#####################################################################
########################  Shot Noise Model ##########################
#####################################################################

# Configuration File for the Shot Noise model [1] 
**.shot_noise_file = "ShotNoiseScenario.txt" 

# Multiplicative factor for the Toff (e.g., Toff = k * Ton)
**.toff_mult_factor = ${ koff = 0 }

# Number of requests that users want to simulate
**.num_tot_req= ${ totReq = 1e9 }


## OUTPUT FILES
output-vector-file = ${resultdir}/T_networks/tree_res_0_5_1_FS_nrr_MC_lce_RS_lru_C_100_NC_0_M_1e5_Req_1e5_CatAggr_1_A_1_CT_IRM_ToffMult_0_Start_hot_Fill_model_ChNodes_0_run=${repetition}.vec
output-scalar-file = ${resultdir}/T_networks/tree_res_0_5_1_FS_nrr_MC_lce_RS_lru_C_100_NC_0_M_1e5_Req_1e5_CatAggr_1_A_1_CT_IRM_ToffMult_0_Start_hot_Fill_model_ChNodes_0_run=${repetition}.sca

# References
# [1] Traverso et al., Temporal Locality in Today's Content Caching: Why It Matters and How to Model It. SIGCOMM Comput. Commun. Rev.,
#	  vol. 43, n. 5, pp 5-12, Nov., 2013.
